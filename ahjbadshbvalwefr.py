import time
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox, simpledialog
from PIL import Image, ImageTk


class XAMMessenger:
    def __init__(self, root):
        self.root = root
        self.root.title("XAM Messenger")
        self.root.geometry("1200x800")
        self.root.configure(bg="#182533")
        self.root.minsize(1200, 800)

        # –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∫–∏
        try:
            self.avatar_image = Image.open("icon.jpg")
            self.avatar_image = self.avatar_image.resize((40, 40), Image.LANCZOS)
            self.avatar_photo = ImageTk.PhotoImage(self.avatar_image)
        except FileNotFoundError:
            self.avatar_photo = None

        # –°—Ç–∏–ª–∏
        self.style = ttk.Style()
        self.style.theme_use("clam")
        self.style.configure("TFrame", background="#182533")
        self.style.configure("TLabel", background="#182533", foreground="white")
        self.style.configure("TButton", background="#182533", foreground="white", borderwidth=0)
        self.style.configure("TEntry", fieldbackground="#2A3B4C", foreground="white", font=("Segoe UI", 11))
        self.style.map("TButton", background=[("active", "#2A3B4C")])

        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.contacts = {
            "–ú–∞–∫—Å–∏–º": [],
            "–ê–Ω–Ω–∞": [("–ê–Ω–Ω–∞", "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?"), ("–Ø", "–ü—Ä–∏–≤–µ—Ç! –í—Å—ë –æ—Ç–ª–∏—á–Ω–æ!")],
            "–ë–æ—Ä–∏—Å": [("–ë–æ—Ä–∏—Å", "–¢—ã –ø–æ—Å–º–æ—Ç—Ä–µ–ª –¥–æ–∫—É–º–µ–Ω—Ç—ã?"), ("–Ø", "–î–∞, —è –∏—Ö —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª.")],
            "–í–∏–∫—Ç–æ—Ä": [("–í–∏–∫—Ç–æ—Ä", "–ù–∞–ø–æ–º–Ω–∏, –∫–æ–≥–¥–∞ —É –Ω–∞—Å –≤—Å—Ç—Ä–µ—á–∞?"), ("–Ø", "–í —Å—Ä–µ–¥—É –≤ 14:00")],
            "–î–∞—Ä—å—è": [("–î–∞—Ä—å—è", "–°–∫–∏–Ω—É–ª–∞ —Ç–µ–±–µ —Ñ–∞–π–ª"), ("–Ø", "–ü–æ–ª—É—á–∏–ª, —Å–ø–∞—Å–∏–±–æ!")],
            "–ï–≤–≥–µ–Ω–∏–π": [("–ï–≤–≥–µ–Ω–∏–π", "–ì–æ—Ç–æ–≤ –∫ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏?"), ("–Ø", "–î–∞, –≤—Å—ë –≥–æ—Ç–æ–≤–æ!")],
            "–ó–æ—è": [("–ó–æ—è", "–ö–∞–∫ –ø—Ä–æ—à–ª–∞ –ø–æ–µ–∑–¥–∫–∞?"), ("–Ø", "–û—á–µ–Ω—å —Ö–æ—Ä–æ—à–æ, —Å–ø–∞—Å–∏–±–æ!")]
        }
        self.current_chat = "–ú–∞–∫—Å–∏–º"

        # –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_left_sidebar()
        self.create_chat_area()
        self.create_message_input()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        self.load_contacts()
        self.contact_list.selection_set(0)
        self.switch_chat()

    def create_left_sidebar(self):
        # –ü–∞–Ω–µ–ª—å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.left_frame = ttk.Frame(self.root, width=250)
        self.left_frame.pack(side=tk.LEFT, fill=tk.Y, padx=5, pady=5)
        self.left_frame.pack_propagate(False)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header = ttk.Frame(self.left_frame)
        header.pack(fill=tk.X, pady=(0, 10))
        ttk.Label(header, text="–ß–∞—Ç—ã", font=("Segoe UI", 14, "bold")).pack(side=tk.LEFT, padx=10)

        # –ü–æ–∏—Å–∫
        search_frame = ttk.Frame(self.left_frame)
        search_frame.pack(fill=tk.X, pady=(0, 10))

        self.search_var = tk.StringVar()
        self.search_entry = ttk.Entry(search_frame, textvariable=self.search_var, width=23)
        self.search_entry.pack(side=tk.LEFT, fill=tk.X, padx=(0, 5), expand=True)
        self.search_entry.insert(0, "–ü–æ–∏—Å–∫...")
        self.search_entry.bind("<FocusIn>", lambda e: self.search_entry.delete(0, tk.END))
        self.search_entry.bind("<KeyRelease>", self.filter_contacts)

        search_btn = ttk.Button(search_frame, text="üîç", width=3)
        search_btn.pack(side=tk.RIGHT)

        # –°–ø–∏—Å–æ–∫ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
        self.contact_list = tk.Listbox(
            self.left_frame,
            bg="#2A3B4C",
            fg="white",
            borderwidth=0,
            highlightthickness=0,
            selectbackground="#3d5466",
            activestyle="none",
            font=("Segoe UI", 11),
            selectmode=tk.SINGLE
        )
        self.contact_list.pack(fill=tk.BOTH, expand=True)
        self.contact_list.bind("<<ListboxSelect>>", self.switch_chat)

        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å
        bottom_frame = ttk.Frame(self.left_frame)
        bottom_frame.pack(fill=tk.X, pady=(5, 0))

        new_chat_btn = ttk.Button(
            bottom_frame,
            text="–ù–æ–≤—ã–π —á–∞—Ç",
            command=self.create_new_chat,
            width=10
        )
        new_chat_btn.pack(side=tk.LEFT, padx=2)

        settings_btn = ttk.Button(bottom_frame, text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", width=10)
        settings_btn.pack(side=tk.RIGHT, padx=2)

    def create_chat_area(self):
        # –û–±–ª–∞—Å—Ç—å —á–∞—Ç–∞
        main_frame = ttk.Frame(self.root)
        main_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 5), pady=5)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
        self.header_frame = ttk.Frame(main_frame, height=60)
        self.header_frame.pack(fill=tk.X)
        self.header_frame.pack_propagate(False)

        # –ê–≤–∞—Ç–∞—Ä–∫–∞
        self.avatar_label = ttk.Label(self.header_frame)
        self.avatar_label.pack(side=tk.LEFT, padx=(10, 5))

        # –ò–º—è —á–∞—Ç–∞ –∏ –∫–Ω–æ–ø–∫–∏
        info_frame = ttk.Frame(self.header_frame)
        info_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)

        self.chat_title = ttk.Label(
            info_frame,
            text=self.current_chat,
            font=("Segoe UI", 12, "bold")
        )
        self.chat_title.pack(anchor=tk.W, padx=(0, 10))

        status_label = ttk.Label(
            info_frame,
            text="–≤ —Å–µ—Ç–∏",
            font=("Segoe UI", 9),
            foreground="#6e7d8d"
        )
        status_label.pack(anchor=tk.W)

        btn_frame = ttk.Frame(self.header_frame)
        btn_frame.pack(side=tk.RIGHT, padx=10)

        call_btn = ttk.Button(btn_frame, text="üìû", width=3)
        call_btn.pack(side=tk.LEFT, padx=2)

        menu_btn = ttk.Button(btn_frame, text="‚ãÆ", width=3)
        menu_btn.pack(side=tk.LEFT, padx=2)

        # –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        chat_frame = ttk.Frame(main_frame)
        chat_frame.pack(fill=tk.BOTH, expand=True, pady=(5, 0))

        self.chat_history = scrolledtext.ScrolledText(
            chat_frame,
            bg="#0e1621",
            fg="white",
            font=("Segoe UI", 11),
            wrap=tk.WORD,
            padx=15,
            pady=15,
            state=tk.DISABLED,
            insertbackground="white"
        )
        self.chat_history.pack(fill=tk.BOTH, expand=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–µ–≥–æ–≤ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π
        self.chat_history.tag_configure("contact",
                                        background="#2A3B4C",
                                        lmargin1=20,
                                        lmargin2=20,
                                        rmargin=60,
                                        relief=tk.FLAT,
                                        spacing2=5,
                                        borderwidth=10,
                                        wrap=tk.WORD)

        self.chat_history.tag_configure("self",
                                        background="#2b5278",
                                        lmargin1=60,
                                        lmargin2=20,
                                        rmargin=20,
                                        relief=tk.FLAT,
                                        spacing2=5,
                                        justify=tk.RIGHT,
                                        borderwidth=10,
                                        wrap=tk.WORD)

    def create_message_input(self):
        # –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–∞—Å–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –≤–Ω–∏–∑—É)
        input_frame = ttk.Frame(self.root)
        input_frame.pack(fill=tk.X, padx=(0, 5), pady=(0, 5), side=tk.BOTTOM)

        # –í–µ—Ä—Ö–Ω—è—è –ª–∏–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è
        separator = ttk.Frame(input_frame, height=1, style="Separator.TFrame")
        separator.pack(fill=tk.X, pady=(0, 5))

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–≤–æ–¥–∞
        input_container = ttk.Frame(input_frame)
        input_container.pack(fill=tk.X, padx=5, pady=5)

        # –ö–Ω–æ–ø–∫–∏ –≤–ª–æ–∂–µ–Ω–∏–π
        attach_frame = ttk.Frame(input_container, width=40)
        attach_frame.pack(side=tk.LEFT, fill=tk.Y)

        attach_btn = ttk.Button(attach_frame, text="üìé", width=3)
        attach_btn.pack(side=tk.TOP, padx=2)

        emoji_btn = ttk.Button(attach_frame, text="üòä", width=3)
        emoji_btn.pack(side=tk.TOP, padx=2, pady=5)

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        self.message_var = tk.StringVar()
        self.message_entry = ttk.Entry(
            input_container,
            textvariable=self.message_var,
            font=("Segoe UI", 11)
        )
        self.message_entry.pack(side=tk.LEFT, fill=tk.X, expand=True, padx=5)
        self.message_entry.bind("<Return>", self.send_message)
        self.message_entry.focus_set()

        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        send_btn = ttk.Button(
            input_container,
            text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å",
            command=self.send_message,
            width=10
        )
        send_btn.pack(side=tk.RIGHT)

    def load_contacts(self):
        self.contact_list.delete(0, tk.END)
        for contact in sorted(self.contacts.keys()):
            self.contact_list.insert(tk.END, contact)

        # –í—ã–¥–µ–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π —á–∞—Ç
        try:
            idx = list(self.contacts.keys()).index(self.current_chat)
            self.contact_list.selection_set(idx)
            self.contact_list.see(idx)
        except ValueError:
            pass

    def load_chat_history(self):
        self.chat_history.config(state=tk.NORMAL)
        self.chat_history.delete(1.0, tk.END)

        for sender, text in self.contacts[self.current_chat]:
            tag = "contact" if sender != "–Ø" else "self"
            self.chat_history.insert(tk.END, text + "\n", tag)
            self.chat_history.insert(tk.END, "\n")

        self.chat_history.config(state=tk.DISABLED)
        self.chat_history.yview(tk.END)

    def add_message(self, text, sender="–Ø"):
        # –î–æ–±–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.chat_history.config(state=tk.NORMAL)
        tag = "self" if sender == "–Ø" else "contact"
        self.chat_history.insert(tk.END, text + "\n", tag)
        self.chat_history.insert(tk.END, "\n")
        self.chat_history.config(state=tk.DISABLED)
        self.chat_history.yview(tk.END)

        # –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö
        self.contacts[self.current_chat].append((sender, text))

    def send_message(self, event=None):
        message = self.message_var.get().strip()
        if message:
            self.add_message(message)
            self.message_var.set("")

            # –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è –ú–∞–∫—Å–∏–º–∞
            if self.current_chat == "–ú–∞–∫—Å–∏–º":
                replies = [
                    "Yeah-yeah, —è —Ç–æ–∂–µ –ø–µ—Ä–µ–¥–∞—é –≤–∞–º –ø—Ä–∏–≤–µ—Ç, –∞–±—Å–æ–ª—é—Ç–Ω–æ –º–Ω–µ –Ω–µ–∑–Ω–∞–∫–æ–º—ã–π –ø—Ä–æ—Ö–æ–∂–∏–π –ø–æ–¥ –∏–º–µ–Ω–µ–º –ê–ª–µ–∫—Å. –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–∞–∫—Å–∏–º –∏ –º–Ω–µ 48 –ª–µ—Ç.",
                    "–ú–æ—ë —Ö–æ–±–±–∏ –µ—Å—Ç—å –±—ã—Ç—å –µ—Å—Ç—å –≥–∞–º–±—É—Ä–≥–µ—Ä, —è –ª—é–±–ª—é –∏–º–µ—Ç—å –¥–æ–º, –∏–º–µ—Ç—å –∂–µ–Ω—É, –∏–º–µ—Ç—å —Å–æ–±–∞–∫—É –∏ –∏–º–µ—Ç—å –¥–µ—Ç–µ–π.",
                    "–Ø –∏–º–µ—é —Å–≤–æ–∏—Ö –¥–µ—Ç–µ–π –∫–∞–∫ –æ–¥–∏–Ω –±—Ä–∞—Ç –∏ –æ–¥–Ω–∞ —Å–µ—Å—Ç—Ä–∞. –£ —Å–µ—Å—Ç—Ä—ã —Ç–æ–∂–µ –µ—Å—Ç—å —Ä–∞–±–æ—Ç—É –≤–æ —Ä—Ç—É.",
                    "–û—É, no, –Ω–µ –≤–∞–∂–Ω–æ. –ê –¥–∞–≤–∞–π—Ç–µ –≤—ã –ø–æ–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤—ã –ª—é–±–∏—Ç–µ –∏–º–µ—Ç—å —Å–æ–±–∞–∫–∞ –Ω–∞ —É–ª–∏—Ü–µ?"
                ]
                if len(self.contacts[self.current_chat]) == 9:
                    time.sleep(10)
                    exit(0)
                # –í—ã–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–ª–∏–Ω—ã –∏—Å—Ç–æ—Ä–∏–∏
                idx = (len(self.contacts[self.current_chat]) - 1) // 2
                self.root.after(2000, lambda: self.add_message(replies[idx], "–ú–∞–∫—Å–∏–º"))

    def switch_chat(self, event=None):
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —á–∞—Ç
        selected = self.contact_list.curselection()
        if selected:
            self.current_chat = self.contact_list.get(selected[0])
            self.chat_title.config(text=self.current_chat)
            self.load_chat_history()
            self.update_avatar()

    def update_avatar(self):
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–≤–∞—Ç–∞—Ä–∫–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ —á–∞—Ç–∞
        if self.current_chat == "–ú–∞–∫—Å–∏–º" and self.avatar_photo:
            self.avatar_label.configure(image=self.avatar_photo)
        else:
            # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ - –∏–Ω–∏—Ü–∏–∞–ª—ã
            self.avatar_label.configure(image='')
            self.avatar_label.configure(
                text=self.current_chat[0],
                font=("Segoe UI", 14, "bold"),
                background="#3d5466",
                foreground="white",
                width=3,
                anchor=tk.CENTER,
                relief=tk.FLAT
            )

    def create_new_chat(self):
        # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —á–∞—Ç–∞
        contact = simpledialog.askstring("–ù–æ–≤—ã–π —á–∞—Ç", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ–Ω—Ç–∞–∫—Ç–∞:", parent=self.root)
        if contact and contact.strip():
            contact = contact.strip()
            if contact in self.contacts:
                messagebox.showinfo("–û—à–∏–±–∫–∞", f"–ß–∞—Ç —Å {contact} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return

            self.contacts[contact] = []
            self.load_contacts()

            # –í—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π —á–∞—Ç
            idx = list(self.contacts.keys()).index(contact)
            self.contact_list.selection_clear(0, tk.END)
            self.contact_list.selection_set(idx)
            self.contact_list.see(idx)
            self.current_chat = contact
            self.chat_title.config(text=self.current_chat)
            self.update_avatar()
            self.load_chat_history()

    def filter_contacts(self, event):
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ –ø–æ–∏—Å–∫—É
        search_term = self.search_var.get().lower()
        self.contact_list.delete(0, tk.END)

        for contact in self.contacts:
            if search_term in contact.lower():
                self.contact_list.insert(tk.END, contact)

        # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —á–∞—Ç–∞
        if self.current_chat in self.contacts and search_term in self.current_chat.lower():
            idx = list(self.contacts.keys()).index(self.current_chat)
            self.contact_list.selection_set(idx)
            self.contact_list.see(idx)


if __name__ == "__main__":
    root = tk.Tk()
    app = XAMMessenger(root)
    app.update_avatar()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∫–∏
    root.mainloop()
